;label defining for VDP (Video Display Processor)
VDP_RAM         equ $2e
VDP_REG         equ $2f

VDP_WREG        equ 10000000b   ; to be added to the REG value
VDP_RRAM        equ 00000000b   ; to be added to the ADRS value
VDP_WRAM        equ 01000000b   ; to be added to the ADRS value
VDP_R0          equ 00h
VDP_R1          equ 01h
VDP_R2          equ 02h
VDP_R3          equ 03h
VDP_R4          equ 04h
VDP_R5          equ 05h
VDP_R6          equ 06h
VDP_R7          equ 07h

VDP_INIT:       ; set up registers for text mode
                ld b,$08            ; 8 registers
                ld hl,VDPTXTREG     ; pointer to registers settings
                ld a,VDP_WREG+$00   ; start with REG0 ($80+register number)
                ld c,VDP_REG        ; VDP port for registers access
LDREGVLS        ld d,(HL)           ; load register's value
                out (c),d           ; send data to VDP
                out (c),a           ; indicate the register to send data to
                inc a               ; next register
                inc hl              ; next value
                djnz LDREGVLS       ; repeat for 8 registers

                ; reset VRAM
                ld c,VDP_REG        ; load VPD port value
                ld hl,$4000         ; first RAM cell $0000 (MSBs must be 0 & 1, resp.)
                xor a,a
                out (c),l           ; low byte of address to VDP
                out (c),h           ; high byte address to VDP
                ld b,$40            ; $40 pages of RAM...
                ld d,a              ; ...each one with $100 cells (tot. $4000 bytes)
EMPTYVRAM:      out (VDP_RAM),a     ; after first byte, the VDP autoincrements VRAM pointer
                nop
                nop
                inc d               ; next cell
                jr nz,EMPTYVRAM     ; repeat until page is fully cleared
                djnz EMPTYVRAM      ; repeat for $40 pages

                ; load charset
                ld b,$ff            ; 127 chars to be loaded
                ld hl,$4000         ; fist pattern cell $0000 (MSB must be 0 & 1)
                ld c,VDP_REG        ; load VDP address into C
                out (c),l           ; send low byte of address
                out (c),h           ; send high byte
                ld hl,CHARSET       ; address of first byte of first pattern into ROM
NXTCHAR:        ld d,$08            ; 8 bytes per pattern char
SENDCHRPTRNS:   ld a,(hl)           ; load byte to send to VDP
                out (VDP_RAM),a     ; send byte to VRAM
                nop
                inc hl              ; inc byte pointer
                dec d               ; 8 bytes sents (1 char)?
                jr nz,SENDCHRPTRNS  ; no, continue
                djnz NXTCHAR        ; yes, decrement chars counter and continue for all the 127 chars

ENDVDPINIT      ret                 ; return to caller


; copy a null-terminated string to VRAM
;       HL = ram source address
VDP_PRINT:      ; Print Message
                ld c,VDP_REG        ; load VPD port value
                out (c),a           ; low byte of address to VDP
                out (c),d           ; high byte address to VDP
LDWLCMMSG       ld a,(hl)           ; load char
                cp $00              ; is it the end of message?
                jr z,ENDVDPINIT     ; yes, exit
                out (VDP_RAM),a     ; no, print char onto screen
                nop
                inc hl
                jr LDWLCMMSG        ; next char
                ret 

; set the address to place text at X/Y coordinate
;       A = X
;       E = Y
VDP_SETPOS:
        ld      d, 0
        ld      hl, 0
        add     hl, de                  ; Y x 1
        add     hl, hl                  ; Y x 2
        add     hl, hl                  ; Y x 4
        add     hl, de                  ; Y x 5
        add     hl, hl                  ; Y x 10
        add     hl, hl                  ; Y x 20
        add     hl, hl                  ; Y x 40
        ld      e, a
        add     hl, de                  ; add column for final address
        ex      de, hl                  ; send address to TMS
        call    VDP_WRITEADDR
        ret

; set the next address of vram to write
;       DE = address
VDP_WRITEADDR:
        ld      a, e                    ; send lsb
        out     (VDP_REG), a
        ld      a, d                    ; mask off msb to max of 16KB
        and     $3F
        or      $40                     ; set second highest bit to indicate write
        out     (VDP_REG), a             ; send msb
        ret

                ; VDP registers settings to set up a text mode
VDPTXTREG       defb 00000000b    ; reg.0: external video disabled
                defb 11010000b    ; reg.1: text mode (40x24), enable display
                defb $02          ; reg.2: name table set to $800 ($02x$400)
                defb $00          ; reg.3: not used in text mode
                defb $00          ; reg.4: pattern table set to $0000
                defb $00          ; reg.5: not used in text mode
                defb $00          ; reg.6: not used in text mode
                defb $f1          ; reg.7: light blue text on white background

;-------------------------------------------------------------------------------
;
;               C  H  A  R  S  E  T
;
;-------------------------------------------------------------------------------
;

CHARSET: equ $
        defb 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; char 0
        defb 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; char 1
        defb 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; char 2
        defb 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; char 3
        defb 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; char 4
        defb 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; char 5
        defb 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; char 6
        defb 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; char 7
        defb 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; char 8
        defb 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; char 9
        defb 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; char 10
        defb 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; char 11
        defb 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; char 12
        defb 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; char 13
        defb 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; char 14
        defb 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; char 15
        defb 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; char 16
        defb 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; char 17
        defb 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; char 18
        defb 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; char 19
        defb 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; char 20
        defb 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; char 21
        defb 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; char 22
        defb 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; char 23
        defb 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; char 24
        defb 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; char 25
        defb 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; char 26
        defb 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; char 27
        defb 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; char 28
        defb 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; char 29
        defb 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; char 30
        defb 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; char 31
        defb 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; space
        defb 0x20,0x20,0x20,0x20,0x20,0x00,0x20,0x00 ; !
        defb 0x50,0x50,0x00,0x00,0x00,0x00,0x00,0x00 ; "
        defb 0x50,0x50,0xf8,0x50,0xf8,0x50,0x50,0x00 ; #
        defb 0x20,0x78,0xa0,0x70,0x28,0xf0,0x20,0x00 ; $
        defb 0xc0,0xc8,0x10,0x20,0x40,0x98,0x18,0x00 ; %
        defb 0x60,0x90,0xa0,0x40,0xa8,0x90,0x68,0x00 ; &
        defb 0x60,0x20,0x40,0x00,0x00,0x00,0x00,0x00 ; '
        defb 0x10,0x20,0x40,0x40,0x40,0x20,0x10,0x00 ; (
        defb 0x40,0x20,0x10,0x10,0x10,0x20,0x40,0x00 ; )
        defb 0x00,0x20,0xa8,0x70,0xa8,0x20,0x00,0x00 ; *
        defb 0x00,0x20,0x20,0xf8,0x20,0x20,0x00,0x00 ; +
        defb 0x00,0x00,0x00,0x00,0x60,0x20,0x40,0x00 ; ,
        defb 0x00,0x00,0x00,0xf8,0x00,0x00,0x00,0x00 ; -
        defb 0x00,0x00,0x00,0x00,0x00,0x60,0x60,0x00 ; .
        defb 0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00 ; /
        defb 0x70,0x88,0x98,0xa8,0xc8,0x88,0x70,0x00 ; 0
        defb 0x20,0x60,0x20,0x20,0x20,0x20,0x70,0x00 ; 1
        defb 0x70,0x88,0x08,0x10,0x20,0x40,0xf8,0x00 ; 2
        defb 0xf8,0x10,0x20,0x10,0x08,0x88,0x70,0x00 ; 3
        defb 0x10,0x30,0x50,0x90,0xf8,0x10,0x10,0x00 ; 4
        defb 0xf8,0x80,0xf0,0x08,0x08,0x88,0x70,0x00 ; 5
        defb 0x30,0x40,0x80,0xf8,0x88,0x88,0x70,0x00 ; 6
        defb 0xf8,0x08,0x10,0x20,0x40,0x40,0x40,0x00 ; 7
        defb 0x70,0x88,0x88,0x70,0x88,0x88,0x70,0x00 ; 8
        defb 0x70,0x88,0x88,0x78,0x08,0x10,0x60,0x00 ; 9
        defb 0x00,0x30,0x30,0x00,0x30,0x30,0x00,0x00 ; :
        defb 0x00,0x30,0x30,0x00,0x30,0x10,0x20,0x00 ; ;
        defb 0x10,0x20,0x40,0x80,0x40,0x20,0x10,0x00 ; <
        defb 0x14,0x14,0x14,0x14,0x14,0x00,0x00,0x00 ; =
        defb 0x40,0x20,0x10,0x08,0x10,0x20,0x40,0x00 ; >
        defb 0x70,0x88,0x08,0x10,0x20,0x00,0x20,0x00 ; ?
        defb 0x70,0x88,0x08,0x68,0xa8,0xa8,0x70,0x00 ; @
        defb 0x70,0x88,0x88,0x88,0xf8,0x88,0x88,0x00 ; A
        defb 0xf0,0x88,0x88,0xf0,0x88,0x88,0xf0,0x00 ; B
        defb 0x70,0x88,0x80,0x80,0x80,0x88,0x70,0x00 ; C
        defb 0xe0,0x90,0x88,0x88,0x88,0x90,0xe0,0x00 ; D
        defb 0xf8,0x80,0x80,0xf0,0x80,0x80,0xf8,0x00 ; E
        defb 0xf8,0x80,0x80,0xf0,0x80,0x80,0x80,0x00 ; F
        defb 0x70,0x88,0x80,0xb8,0x88,0x88,0x78,0x00 ; G
        defb 0x88,0x88,0x88,0xf8,0x88,0x88,0x88,0x00 ; H
        defb 0x70,0x20,0x20,0x20,0x20,0x20,0x70,0x00 ; I
        defb 0x38,0x10,0x10,0x10,0x10,0x90,0x60,0x00 ; J
        defb 0x88,0x90,0xa0,0xc0,0xa0,0x90,0x88,0x00 ; K
        defb 0x80,0x80,0x80,0x80,0x80,0x80,0xf8,0x00 ; L
        defb 0x88,0xd8,0xa8,0xa8,0x88,0x88,0x88,0x00 ; M
        defb 0x88,0xc8,0xa8,0x98,0x88,0x88,0x88,0x00 ; N
        defb 0x70,0x88,0x88,0x88,0x88,0x88,0x70,0x00 ; O
        defb 0xf0,0x88,0x88,0xf0,0x80,0x80,0x80,0x00 ; P
        defb 0x70,0x88,0x88,0x88,0xa8,0x90,0x68,0x00 ; Q
        defb 0xf0,0x88,0x88,0xf0,0xa0,0x90,0x88,0x00 ; R
        defb 0x78,0x80,0x80,0x70,0x08,0x08,0xf0,0x00 ; S
        defb 0xf8,0x20,0x20,0x20,0x20,0x20,0x20,0x00 ; T
        defb 0x88,0x88,0x88,0x88,0x88,0x88,0x70,0x00 ; U
        defb 0x88,0x88,0x88,0x88,0x88,0x50,0x20,0x00 ; V
        defb 0x88,0x88,0x88,0x88,0xa8,0xa8,0x50,0x00 ; W
        defb 0x88,0x88,0x50,0x20,0x50,0x88,0x88,0x00 ; X
        defb 0x88,0x88,0x88,0x50,0x20,0x20,0x20,0x00 ; Y
        defb 0xf8,0x08,0x10,0x20,0x40,0x80,0xf8,0x00 ; Z
        defb 0x70,0x40,0x40,0x40,0x40,0x40,0x70,0x00 ; [
        defb 0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00 ; \
        defb 0x70,0x10,0x10,0x10,0x10,0x10,0x70,0x00 ; ]
        defb 0x20,0x50,0x88,0x00,0x00,0x00,0x00,0x00 ; ^
        defb 0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0x00 ; _
        defb 0x40,0x20,0x10,0x00,0x00,0x00,0x00,0x00 ; `
        defb 0x00,0x00,0x70,0x08,0x78,0x88,0x78,0x00 ; a
        defb 0x00,0x80,0x80,0xb0,0xc8,0x88,0xf0,0x00 ; b
        defb 0x00,0x00,0x70,0x80,0x80,0x88,0x70,0x00 ; c
        defb 0x08,0x08,0x08,0x68,0x98,0x88,0x78,0x00 ; d
        defb 0x00,0x00,0x70,0x88,0xf8,0x80,0x70,0x00 ; e
        defb 0x30,0x48,0x40,0xe0,0x40,0x40,0x40,0x00 ; f
        defb 0x00,0x78,0x88,0x88,0x78,0x08,0x70,0x00 ; g
        defb 0x80,0x80,0xb0,0xc8,0x88,0x88,0x88,0x00 ; h
        defb 0x00,0x20,0x00,0x20,0x20,0x20,0x20,0x00 ; i
        defb 0x10,0x00,0x30,0x10,0x10,0x90,0x60,0x00 ; j
        defb 0x80,0x80,0x90,0xa0,0xc0,0xa0,0x90,0x00 ; k
        defb 0x60,0x20,0x20,0x20,0x20,0x20,0x70,0x00 ; l
        defb 0x00,0x00,0xd0,0xa8,0xa8,0x88,0x88,0x00 ; m
        defb 0x00,0x00,0xb0,0xc8,0x88,0x88,0x88,0x00 ; n
        defb 0x00,0x00,0x70,0x88,0x88,0x88,0x70,0x00 ; o
        defb 0x00,0x00,0xf0,0x88,0xf0,0x80,0x80,0x00 ; p
        defb 0x00,0x00,0x68,0x98,0x78,0x08,0x08,0x00 ; q
        defb 0x00,0x00,0xb0,0xc8,0x80,0x80,0x80,0x00 ; r
        defb 0x00,0x00,0x70,0x80,0x70,0x08,0xf0,0x00 ; s
        defb 0x40,0x40,0xe0,0x40,0x40,0x48,0x30,0x00 ; t
        defb 0x00,0x00,0x88,0x88,0x88,0x98,0x68,0x00 ; u
        defb 0x00,0x00,0x88,0x88,0x88,0x50,0x20,0x00 ; v
        defb 0x00,0x00,0x88,0x88,0xa8,0xa8,0x50,0x00 ; w
        defb 0x00,0x00,0x88,0x50,0x20,0x50,0x88,0x00 ; x
        defb 0x00,0x00,0x88,0x88,0x78,0x08,0x70,0x00 ; y
        defb 0x00,0x00,0xf8,0x10,0x20,0x40,0xf8,0x00 ; z
        defb 0x10,0x20,0x20,0x40,0x20,0x20,0x10,0x00 ; {
        defb 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00 ; |
        defb 0x20,0x10,0x10,0x08,0x10,0x10,0x20,0x00 ; }
        defb 0x00,0x28,0x50,0x00,0x00,0x00,0x00,0x00 ; ~ (127th char, last ASCII char)

.END